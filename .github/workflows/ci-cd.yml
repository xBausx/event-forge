name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

env:
  AWS_REGION: "us-east-1"
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20.x"
  TERRAFORM_VERSION: "1.6.0"

permissions:
  contents: write

jobs:
  lint:
    name: "Lint & Validate"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "Set up Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: "Set up Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: "Set up TFLint"
        uses: terraform-linters/setup-tflint@v4

      - name: "Terraform fmt (CI pre-step)"
        shell: bash
        working-directory: infra/terraform
        run: terraform fmt -recursive

      - name: "Auto-commit Terraform fmt changes"
        if: github.event_name == 'push'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(terraform): fmt via CI"
          branch: ${{ github.ref_name }}
          file_pattern: |
            infra/terraform/**/*.tf

      - name: "Install pre-commit"
        run: pip install pre-commit

      - name: "Run linters via Makefile"
        id: run_precommit
        run: make lint
        continue-on-error: true

      - name: "Auto-commit pre-commit fixes (exclude workflow files)"
        if: github.event_name == 'push' && steps.run_precommit.outcome == 'failure'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(pre-commit): auto-fix formatting"
          branch: ${{ github.ref_name }}
          file_pattern: |
            src/**/*
            infra/terraform/**/*.tf
            docs/**/*.md
            config/**/*.yml
            config/**/*.yaml
            config/**/*.json
            schemas/**/*.json
            .pre-commit-config.yaml
            README.md

      - name: "Re-run linters"
        if: github.event_name == 'push' && steps.run_precommit.outcome == 'failure'
        run: make lint

  deploy:
    name: "Build & Deploy to AWS"
    needs: lint
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ (github.ref == 'refs/heads/main' && 'dev') || 'none' }}

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "Set up Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: "Configure AWS Credentials (Access Keys)"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "Build Python Lambdas with Dependencies"
        run: |
          set -e
          echo "Building Python Lambda packages..."
          for fn in read_sheet generate_poster send_report; do
            echo "--- Packaging $fn ---"
            pushd src/lambdas/$fn
            python3 -m pip install -r requirements.txt -t .
            if [ ! -d "src" ]; then mkdir -p src; fi
            cp -r ../../common src/common
            find . -type d -name "__pycache__" -exec rm -rf {} +
            popd
          done

      - name: "Build Orchestration Code"
        run: |
          echo "Building TypeScript orchestration code..."
          pushd src/orchestration
          npm ci
          npm run build
          popd

      - name: "Set up Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: "Terraform Apply (dev)"
        if: github.ref == 'refs/heads/main'
        run: make tf-apply env=dev

      # ⬇⬇⬇ Set the signing key directly on the Lambda after apply (no Secrets Manager) ⬇⬇⬇
      - name: "Set INNGEST_SIGNING_KEY on orchestration Lambda (post-apply)"
        if: github.ref == 'refs/heads/main'
        working-directory: infra/terraform
        env:
          REGION: ${{ env.AWS_REGION }}
          INNGEST_SIGNING_KEY_DEV: ${{ secrets.INNGEST_SIGNING_KEY_DEV }}
        run: |
          set -euo pipefail
          sudo apt-get update && sudo apt-get install -y jq

          if [ -z "${INNGEST_SIGNING_KEY_DEV:-}" ]; then
            echo "::error ::GitHub secret INNGEST_SIGNING_KEY_DEV is not set."
            exit 1
          fi

          FUNC_NAME=$(terraform output -raw orchestration_function_name)
          if [ -z "${FUNC_NAME:-}" ]; then
            echo "::error ::Could not read orchestration_function_name output."
            exit 1
          fi

          CURRENT=$(aws lambda get-function-configuration \
            --function-name "$FUNC_NAME" \
            --region "$REGION" \
            --query 'Environment.Variables' \
            --output json)

          UPDATED=$(echo "$CURRENT" | jq --arg v "$INNGEST_SIGNING_KEY_DEV" '. + {INNGEST_SIGNING_KEY: $v}')

          aws lambda update-function-configuration \
            --function-name "$FUNC_NAME" \
            --region "$REGION" \
            --environment "Variables=$UPDATED"

          echo "INNGEST_SIGNING_KEY set on $FUNC_NAME"

      - name: "Show Terraform Outputs"
        if: github.ref == 'refs/heads/main'
        working-directory: infra/terraform
        run: |
          echo "Orchestration Function URL:"
          terraform output orchestration_function_url || true
          echo
          echo "Assets bucket:"
          terraform output assets_bucket || true
          echo
          echo "Outputs bucket:"
          terraform output outputs_bucket || true

      - name: "Write outputs to job summary"
        if: github.ref == 'refs/heads/main'
        working-directory: infra/terraform
        shell: bash
        run: |
          {
            echo "## Terraform outputs"
            echo ""
            echo "- Orchestration Function URL: \`$(terraform output -raw orchestration_function_url 2>/dev/null || echo 'N/A')\`"
            echo "- Assets bucket: \`$(terraform output -raw assets_bucket 2>/dev/null || echo 'N/A')\`"
            echo "- Outputs bucket: \`$(terraform output -raw outputs_bucket 2>/dev/null || echo 'N/A')\`"
          } >> "$GITHUB_STEP_SUMMARY"
